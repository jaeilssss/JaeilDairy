name: Deploy to AWS via Bastion Host with Docker

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: deploy-dev # ✅ 배포 환경을 deploy-dev로 설정

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=$(date +%s)
          docker build -t ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV  # EC2에서 사용할 이미지 태그 저장

      - name: Get Private IP dynamically
        run: |
          PRIVATE_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=my-private-instance" --query "Reservations[*].Instances[*].PrivateIpAddress" --output text)
          echo "PRIVATE_IP=${PRIVATE_IP}" >> $GITHUB_ENV

      - name: SSH into Bastion and Deploy to Private EC2
        run: |
          ssh -o StrictHostKeyChecking=no -A ${{ secrets.BASTION_USER }}@${{ secrets.BASTION_HOST }} << 'EOF'
            ssh -o StrictHostKeyChecking=no ec2-user@$PRIVATE_IP << 'INNER_EOF'
              aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}
              docker pull ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
              docker stop my-app || true
              docker rm my-app || true
              docker run -d --name my-app -p 80:8000 ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
            INNER_EOF
          EOF
